.. _sect-repl:

**************
The Idris REPL
**************

Idris comes with a ``REPL``.

Evaluation
==========

Being a fully dependently typed language, Idris has two phases where it
evaluates things, compile-time and run-time. At compile-time it will only
evaluate things which it knows to be total (i.e. terminating and covering all
possible inputs) in order to keep type checking decidable. The compile-time
evaluator is part of the Idris kernel, and is implemented in Haskell using a
HOAS (higher order abstract syntax) style representation of values. Since
everything is known to have a normal form here, the evaluation strategy doesn't
actually matter because either way it will get the same answer, and in practice
it will do whatever the Haskell run-time system chooses to do.

The REPL, for convenience, uses the compile-time notion of evaluation. As well
as being easier to implement (because we have the evaluator available) this can
be very useful to show how terms evaluate in the type checker. So you can see
the difference between:

.. code-block:: idris

    Idris> \n, m => (S n) + m
    \n => \m => S (plus n m) : Nat -> Nat -> Nat

    Idris> \n, m => n + (S m)
    \n => \m => plus n (S m) : Nat -> Nat -> Nat

Customisation
=============

Idris has an RC file. Documentation to be added.

The ``REPL`` Commands
=====================

The current set of supported commands are:

+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|Command         | Arguments                    | Purpose                                                                                                  |
+================+==============================+==========================================================================================================+
|<expr>          |                              | Evaluate an expression                                                                                   |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:t :type        | <expr>                       | Check the type of an expression                                                                          |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:core           | <expr>                       | View the core language representation of a term                                                          |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:miss :missing  | <name>                       | Show missing clauses                                                                                     |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:doc            | <name>                       | Show internal documentation                                                                              |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:mkdoc          | <namespace>                  | Generate IdrisDoc for namespace(s) and dependencies                                                      |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:apropos        | [<package list>] <name>      | Search names, types, and documentation                                                                   |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:s :search      | [<package list>] <expr>      | Search for values by type                                                                                |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:wc :whocalls   | <name>                       | List the callers of some name                                                                            |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:cw :callswho   | <name>                       | List the callees of some name                                                                            |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:browse         | <namespace>                  | List the contents of some namespace                                                                      |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:total          | <name>                       | Check the totality of a name                                                                             |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:r :reload      |                              | Reload current file                                                                                      |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:l :load        | <filename>                   | Load a new file                                                                                          |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:cd             | <filename>                   | Change working directory                                                                                 |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:module         | <module>                     | Import an extra module                                                                                   |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:e :edit        |                              | Edit current file using $EDITOR or $VISUAL                                                               |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:m :metavars    |                              | Show remaining proof obligations (metavariables)                                                         |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:p :prove       | <metavar>                    | Prove a metavariable                                                                                     |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:a :addproof    | <name>                       | Add proof to source file                                                                                 |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:rmproof        | <name>                       | Remove proof from proof stack                                                                            |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:showproof      | <name>                       | Show proof                                                                                               |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:proofs         |                              | Show available proofs                                                                                    |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:x              | <expr>                       | Execute IO actions resulting from an expression using the interpreter                                    |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:c :compile     | <filename>                   | Compile to an executable [codegen] <filename>                                                            |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:exec :execute  | [<expr>]                     | Compile to an executable and run                                                                         |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:dynamic        | <filename>                   | Dynamically load a C library (similar to %dynamic)                                                       |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:dynamic        |                              | List dynamically loaded C libraries                                                                      |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:? :h :help     |                              | Display this help text                                                                                   |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:set            | <option>                     | Set an option (errorcontext, showimplicits)                                                              |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:unset          | <option>                     | Unset an option                                                                                          |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:color :colour  | <option>                     | Turn REPL colours on or off; set a specific colour                                                       |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:consolewidth   | auto|infinite|<number>       | Set the width of the console                                                                             |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:q :quit        |                              | Exit the Idris system                                                                                    |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:w :warranty    |                              | Displays warranty information                                                                            |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:let            | (<top-level-declaration>)... | Evaluate a declaration, such as a function definition, instance implementation, or fixity declaration    |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:unlet :undefine|(<name>)...                   | Remove the listed repl definitions, or all repl definitions if no names given                            |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:printdef       | <name>                       | Show the definition of a function                                                                        |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
|:pp :pprint     | <option> <number> <name>     | Pretty prints an Idris function in either LaTeX or HTML and for a specified width.                       |
+----------------+------------------------------+----------------------------------------------------------------------------------------------------------+
