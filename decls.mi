infixl 5 +, - ;
infixl 6 *, / ;

infixl 7 :: ;

data Nat    = O   | S Nat;
data List a = Nil | Cons a (List a);

data Vect : Set -> Nat -> Set where
    VNil  : Vect a O
  | (::) : a -> Vect a k -> Vect a (S k); 

data Env : Vect Set n -> Set where
    Empty : Env VNil
  | Extend : {xs : Vect Set n} -> a -> Env xs -> Env (a :: xs);

plus : Nat -> Nat -> Nat;
plus O y = y;
plus (S k) y = S (plus k y);

app : Vect a n -> Vect a m -> Vect a (plus n m);
app VNil      ys = ys;
app (x :: xs) ys = x :: app xs ys;

infixl 5 .+. ;

(.+.) : Nat -> Nat -> Nat;
O     .+. y = y;
(S k) .+. y = S (k .+. y);

